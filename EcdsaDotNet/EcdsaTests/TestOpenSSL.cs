using EllipticCurve;
using EllipticCurve.Utils;
using Xunit;

namespace CPCC.EcdsaTests
{
    public class TestOpenSsl : IClassFixture<PathFixture>
    {
        [Fact]
        public void TestAssign()
        {
            // Generated by: openssl ecparam -name secp256k1 -genkey -out privateKey.pem
            var privateKeyPem = File.Read("files/privateKey.pem");
            var privateKey = PrivateKey.FromPem(privateKeyPem);

            var message = File.Read("files/message.txt");

            var signature = Ecdsa.Sign(message, privateKey);

            var publicKey = privateKey.PublicKey();

            Assert.True(Ecdsa.Verify(message, signature, publicKey));
        }

        [Fact]
        public void TestVerifySignature()
        {
            // openssl ec -in privateKey.pem -pubout -out publicKey.pem
            var publicKeyPem = File.Read("files/publicKey.pem");

            // openssl dgst -sha256 -sign privateKey.pem -out signature.binary message.txt
            var signatureDer = File.ReadBytes("files/signatureDer.txt");

            var message = File.Read("files/message.txt");

            var publicKey = PublicKey.FromPem(publicKeyPem);
            var signature = Signature.FromDer(signatureDer);

            Assert.True(Ecdsa.Verify(message, signature, publicKey));
        }
    }
}